---
# tasks file for mfic.update-host
- name: Update all installed packages and remove unnecessary dependencies
  ansible.builtin.apt:
    upgrade: dist
    autoclean: yes
    autoremove: yes
    update_cache: yes
  environment:
    DEBIAN_FRONTEND: noninteractive
  async: 600
  poll: 0
  register: apt_update_status
  tags:
    - update

- name: Wait for the apt update task to complete
  async_status:
    jid: "{{ apt_update_status.ansible_job_id }}"
  register: apt_update_result
  until: apt_update_result.finished
  retries: 10
  delay: 60
  tags:
    - update

- name: Check for pending package configurations
  shell: "dpkg --audit"
  register: pending_package_config
  changed_when: pending_package_config.stdout != ''
  failed_when: false

- name: Debug - Show pending configurations if any
  debug:
    var: pending_package_config.stdout
  when: pending_package_config.stdout != ''

- name: Send Discord notification if manual intervention is required
  uri:
    url: "{{ discord_webhook_url }}"
    method: POST
    headers:
      Content-Type: "application/json"
    body: |
      {
        "content": "Manual intervention is required on {{ inventory_hostname }}. Pending configurations:\n{{ pending_package_config.stdout }}"
      }
    body_format: json
    status_code: [200, 204]
  when: pending_package_config.stdout != ''

- name: Check for reboot-required file
  stat:
    path: /var/run/reboot-required
  register: reboot_required

- name: Send Discord notification if reboot is required (manual reboot needed)
  uri:
    url: "{{ discord_webhook_url }}"
    method: POST
    headers:
      Content-Type: "application/json"
    body: |
      {
        "content": "Reboot is required on {{ inventory_hostname }}. Manual reboot is needed."
      }
    body_format: json
    status_code: [200, 204]
  when: reboot_required.stat.exists

- name: Reboot the server if required
  reboot:
    msg: "Reboot initiated by Ansible after system update."
    pre_reboot_delay: 30
    post_reboot_delay: 60
    test_command: whoami
  when: reboot_required.stat.exists
  tags:
    - reboot

- name: Wait for server to come back online after reboot
  wait_for_connection:
    delay: 30
  when: reboot_required.stat.exists
  tags:
    - reboot

- name: Send Discord notification after reboot is completed
  uri:
    url: "{{ discord_webhook_url }}"
    method: POST
    headers:
      Content-Type: "application/json"
    body: |
      {
        "content": "Reboot was required and completed on {{ inventory_hostname }}."
      }
    body_format: json
    status_code: [200, 204]
  when: reboot_required.stat.exists
  tags:
    - reboot